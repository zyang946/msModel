MicroServiceModel trainTicket{
	microservice {
		MicroService OrderService {
			provide (createOrder,queryOrder)
			DomainModel orderService {
				@AutoCRUD Entity Order {
					OrderId : String
					TicketId : String
					AccoutId : String
					CreateTime : String
					OrderStatus : OrderStatus[NOTPAID|PAID|CANCELED]
					[Refer]
					orderdto: OrderDto ! Association
				}
				Entity OrderDto {
					[Refer]
					toOrder: Order ! Association
				}
			}
		},
		MicroService RouteService {
			provide(createRoute,queryRoute)

		},
		MicroService travelService {
			require(RqueryOrder, RqueryRoute)
		}
	}
	interface {
		ProvidedInterface createOrder {
			[Operation]
			createOrder(orderId : String, ticketId : String, accoutId : String, CreateTime : String):Boolean
			Contract createOrder{
				precondition:
					true
				postcondition:
					result = true
			}
		},
		ProvidedInterface queryOrder {
			
		},
		RequiredInterface RqueryOrder {
			is queryOrder
			
		},
		ProvidedInterface createRoute {
			
		},
		ProvidedInterface queryRoute {
			
		},
		RequiredInterface RqueryRoute {
			is queryRoute

		},
		ProvidedInterface createTravel {
			CallChain createTravel {
				service orderService : OrderService {
					Message 1 to routeService{
						
					}
				},
				service routeService :RouteService {
				}
			}
		}
		
	}
}